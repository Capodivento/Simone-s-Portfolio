<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Neon Crystal Recreation</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            background-color: #000;
            font-family: Arial, sans-serif;
        }
        canvas {
            display: block;
        }
        .info {
            position: absolute;
            bottom: 20px;
            right: 20px;
            color: rgba(255, 255, 255, 0.5);
            font-family: monospace;
            font-size: 12px;
            pointer-events: none;
        }
        .controls {
            position: absolute;
            bottom: 20px;
            left: 20px;
            color: rgba(255, 255, 255, 0.7);
            font-family: monospace;
            font-size: 12px;
        }
        button {
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.3);
            color: white;
            padding: 5px 10px;
            margin-right: 5px;
            cursor: pointer;
            font-family: monospace;
        }
        button:hover {
            background: rgba(255, 255, 255, 0.2);
        }
    </style>
</head>
<body>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.7.7/dat.gui.min.js"></script>
    <div class="controls">
        <button id="resetBtn">RESET</button>
        <button id="randomizeBtn">RANDOMIZE</button>
    </div>
    <div class="info">Click and drag to rotate | Scroll to zoom</div>
    
    <script>
        // Scene setup
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 2000);
        camera.position.z = 600;
        
        const renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);
        
        // Controls setup
        let isDragging = false;
        let previousMouseX = 0;
        let previousMouseY = 0;
        let targetRotationX = 0;
        let targetRotationY = 0;
        let currentRotationX = 0;
        let currentRotationY = 0;
        
        // Crystal settings
        const params = {
            crystalCount: 15,
            mainCrystalSize: 100,
            smallCrystalMinSize: 20,
            smallCrystalMaxSize: 50,
            distributionRadius: 250,
            rotationSpeed: 0.001,
            autoRotate: true,
            bloomStrength: 1.5,
            pulseSpeed: 0.3,
            colorCycle: true,
            baseHue: 200, // Blue
            hueRange: 60,  // Range for color variations
        };
        
        // Main container for all crystals
        const crystalContainer = new THREE.Group();
        scene.add(crystalContainer);
        
        // Materials
        const lineMaterial = new THREE.LineBasicMaterial({
            color: 0x4080ff,
            transparent: true,
            opacity: 0.7,
            linewidth: 1,
        });
        
        const glowMaterial = new THREE.ShaderMaterial({
            uniforms: {
                time: { value: 0 },
                color: { value: new THREE.Color(0x4080ff) },
                pulseStrength: { value: 1.0 }
            },
            vertexShader: `
                uniform float time;
                uniform float pulseStrength;
                varying vec3 vPosition;
                
                void main() {
                    vPosition = position;
                    vec3 pos = position;
                    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);
                }
            `,
            fragmentShader: `
                uniform vec3 color;
                uniform float time;
                uniform float pulseStrength;
                varying vec3 vPosition;
                
                void main() {
                    float pulse = 0.5 + 0.5 * sin(time * ${params.pulseSpeed});
                    float intensity = 0.7 + 0.3 * pulse * pulseStrength;
                    
                    gl_FragColor = vec4(color * intensity, intensity * 0.7);
                }
            `,
            transparent: true,
            blending: THREE.AdditiveBlending
        });
        
        // Function to create a crystal geometry
        function createCrystalGeometry(size, complexity = 1) {
            const geometry = new THREE.BufferGeometry();
            const points = [];
            
            // Create top and bottom vertices
            points.push(0, size * 1.5, 0);  // Top point
            points.push(0, -size * 1.5, 0); // Bottom point
            
            // Create middle vertices in a crystal-like pattern
            const sides = 5;
            for (let i = 0; i < sides; i++) {
                const angle = (i / sides) * Math.PI * 2;
                const midHeight = size * 0.5;
                
                // Upper middle points
                points.push(
                    Math.cos(angle) * size,
                    midHeight,
                    Math.sin(angle) * size
                );
                
                // Lower middle points
                points.push(
                    Math.cos(angle + Math.PI/sides) * size * 0.7,
                    -midHeight,
                    Math.sin(angle + Math.PI/sides) * size * 0.7
                );
            }
            
            // Set vertices
            geometry.setAttribute('position', new THREE.Float32BufferAttribute(points, 3));
            
            // Create edges
            const indices = [];
            const topIndex = 0;
            const bottomIndex = 1;
            const vertexCount = points.length / 3;
            
            // Connect top to middle upper points
            for (let i = 0; i < (vertexCount - 2) / 2; i++) {
                indices.push(topIndex, 2 + i*2);
            }
            
            // Connect bottom to middle lower points
            for (let i = 0; i < (vertexCount - 2) / 2; i++) {
                indices.push(bottomIndex, 3 + i*2);
            }
            
            // Connect middle points in a zigzag
            for (let i = 2; i < vertexCount - 1; i++) {
                indices.push(i, i + 1);
            }
            indices.push(vertexCount - 1, 2); // Close the loop
            
            // Additional cross connections for more complexity
            if (complexity > 1) {
                for (let i = 0; i < sides - 2; i++) {
                    indices.push(2 + i*2, 2 + (i+2)*2);
                    indices.push(3 + i*2, 3 + (i+2)*2);
                }
            }
            
            geometry.setIndex(indices);
            return geometry;
        }
        
        // Function to create a crystal
        function createCrystal(size, position, color) {
            const complexity = size > 50 ? 2 : 1;
            const geometry = createCrystalGeometry(size, complexity);
            
            // Create line segments for the edges
            const crystal = new THREE.LineSegments(geometry, lineMaterial.clone());
            crystal.material.color.set(color);
            
            // Create the glow effect
            const glowMat = glowMaterial.clone();
            glowMat.uniforms.color.value = new THREE.Color(color);
            glowMat.uniforms.pulseStrength.value = 0.5 + Math.random() * 0.5;
            
            const glowGeometry = geometry.clone();
            const glow = new THREE.LineSegments(glowGeometry, glowMat);
            glow.scale.multiplyScalar(1.05);
            
            crystal.add(glow);
            crystal.position.copy(position);
            
            // Add random rotation
            crystal.rotation.x = Math.random() * Math.PI * 2;
            crystal.rotation.y = Math.random() * Math.PI * 2;
            crystal.rotation.z = Math.random() * Math.PI * 2;
            
            // Store original color
            crystal.userData.originalColor = new THREE.Color(color);
            crystal.userData.pulseOffset = Math.random() * Math.PI * 2;
            crystal.userData.rotationSpeed = {
                x: (Math.random() - 0.5) * 0.002,
                y: (Math.random() - 0.5) * 0.002,
                z: (Math.random() - 0.5) * 0.002
            };
            
            return crystal;
        }
        
        // Generate random position for small crystals
        function getRandomPosition(radius) {
            const theta = Math.random() * Math.PI * 2;
            const phi = Math.acos(2 * Math.random() - 1);
            const r = radius * (0.5 + Math.random() * 0.5);
            
            return new THREE.Vector3(
                r * Math.sin(phi) * Math.cos(theta),
                r * Math.sin(phi) * Math.sin(theta),
                r * Math.cos(phi)
            );
        }
        
        // Generate color with slight variations around a base hue
        function generateColor() {
            const hue = params.baseHue + Math.random() * params.hueRange;
            return new THREE.Color(`hsl(${hue}, 100%, 60%)`);
        }
        
        // Create all crystals
        function createCrystals() {
            // Clear previous crystals
            while(crystalContainer.children.length > 0) { 
                crystalContainer.remove(crystalContainer.children[0]); 
            }
            
            // Create main crystal
            const mainCrystal = createCrystal(
                params.mainCrystalSize, 
                new THREE.Vector3(0, 0, 0),
                generateColor()
            );
            crystalContainer.add(mainCrystal);
            
            // Create smaller crystals around
            for (let i = 0; i < params.crystalCount; i++) {
                const size = params.smallCrystalMinSize + 
                             Math.random() * (params.smallCrystalMaxSize - params.smallCrystalMinSize);
                const position = getRandomPosition(params.distributionRadius);
                const color = generateColor();
                
                const crystal = createCrystal(size, position, color);
                crystalContainer.add(crystal);
            }
        }
        
        // Initialize crystals
        createCrystals();
        
        // Window resize handler
        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        });
        
        // Mouse interaction
        renderer.domElement.addEventListener('mousedown', (e) => {
            isDragging = true;
            previousMouseX = e.clientX;
            previousMouseY = e.clientY;
        });
        
        window.addEventListener('mouseup', () => {
            isDragging = false;
        });
        
        window.addEventListener('mousemove', (e) => {
            if (isDragging) {
                const deltaX = e.clientX - previousMouseX;
                const deltaY = e.clientY - previousMouseY;
                
                targetRotationY += deltaX * 0.01;
                targetRotationX += deltaY * 0.01;
                
                // Limit vertical rotation
                targetRotationX = Math.max(-Math.PI/2, Math.min(Math.PI/2, targetRotationX));
                
                previousMouseX = e.clientX;
                previousMouseY = e.clientY;
            }
        });
        
        // Scroll to zoom
        window.addEventListener('wheel', (e) => {
            const zoomSpeed = 0.1;
            camera.position.z += e.deltaY * zoomSpeed;
            camera.position.z = Math.max(200, Math.min(1000, camera.position.z));
        });
        
        // Touch support
        renderer.domElement.addEventListener('touchstart', (e) => {
            if (e.touches.length === 1) {
                isDragging = true;
                previousMouseX = e.touches[0].clientX;
                previousMouseY = e.touches[0].clientY;
            }
            e.preventDefault();
        });
        
        window.addEventListener('touchend', () => {
            isDragging = false;
        });
        
        window.addEventListener('touchmove', (e) => {
            if (isDragging && e.touches.length === 1) {
                const deltaX = e.touches[0].clientX - previousMouseX;
                const deltaY = e.touches[0].clientY - previousMouseY;
                
                targetRotationY += deltaX * 0.01;
                targetRotationX += deltaY * 0.01;
                
                // Limit vertical rotation
                targetRotationX = Math.max(-Math.PI/2, Math.min(Math.PI/2, targetRotationX));
                
                previousMouseX = e.touches[0].clientX;
                previousMouseY = e.touches[0].clientY;
                
                e.preventDefault();
            }
        });
        
        // Control buttons
        document.getElementById('resetBtn').addEventListener('click', () => {
            targetRotationX = 0;
            targetRotationY = 0;
            camera.position.z = 600;
        });
        
        document.getElementById('randomizeBtn').addEventListener('click', () => {
            params.baseHue = Math.random() * 360;
            createCrystals();
        });
        
        // Animation loop
        let time = 0;
        function animate() {
            requestAnimationFrame(animate);
            
            time += 0.01;
            
            // Update crystal container rotation with easing
            currentRotationX += (targetRotationX - currentRotationX) * 0.1;
            currentRotationY += (targetRotationY - currentRotationY) * 0.1;
            
            crystalContainer.rotation.x = currentRotationX;
            crystalContainer.rotation.y = currentRotationY;
            
            // Auto-rotate if enabled
            if (params.autoRotate) {
                crystalContainer.rotation.y += params.rotationSpeed;
            }
            
            // Update each crystal's individual rotation and color
            crystalContainer.children.forEach((crystal, i) => {
                // Individual crystal rotation
                crystal.rotation.x += crystal.userData.rotationSpeed.x;
                crystal.rotation.y += crystal.userData.rotationSpeed.y;
                crystal.rotation.z += crystal.userData.rotationSpeed.z;
                
                // Update shader uniforms for pulse effect
                if (crystal.children[0] && crystal.children[0].material.uniforms) {
                    crystal.children[0].material.uniforms.time.value = time;
                    
                    // Color cycling if enabled
                    if (params.colorCycle && i === 0) { // Only apply to main crystal
                        const hue = (params.baseHue + time * 10) % 360;
                        const color = new THREE.Color(`hsl(${hue}, 100%, 60%)`);
                        crystal.material.color.copy(color);
                        crystal.children[0].material.uniforms.color.value.copy(color);
                    }
                }
            });
            
            renderer.render(scene, camera);
        }
        
        animate();
    </script>
</body>
</html>
