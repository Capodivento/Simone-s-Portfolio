<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Minimalist 3D Geometric Visualization</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            background: #fafafa;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            color: #2c2c2c;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 1rem;
        }

        .container {
            width: 100%;
            max-width: 900px;
            background: white;
            border-radius: 24px;
            box-shadow: 0 4px 24px rgba(0, 0, 0, 0.06);
            overflow: hidden;
            transition: all 0.3s ease;
        }

        .container:hover {
            box-shadow: 0 8px 40px rgba(0, 0, 0, 0.08);
        }

        .header {
            padding: 2rem 2rem 1rem;
            border-bottom: 1px solid #f0f0f0;
        }

        .title {
            font-size: 1.5rem;
            font-weight: 600;
            color: #1a1a1a;
            margin-bottom: 0.5rem;
            letter-spacing: -0.025em;
        }

        .subtitle {
            color: #666;
            font-size: 0.95rem;
            font-weight: 400;
            line-height: 1.5;
        }

        .canvas-section {
            position: relative;
            height: 500px;
            background: linear-gradient(135deg, #f8f9fa 0%, #ffffff 100%);
        }

        .loading-indicator {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: #666;
            font-size: 0.9rem;
            font-weight: 500;
            z-index: 10;
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .loading-dot {
            width: 8px;
            height: 8px;
            background: #666;
            border-radius: 50%;
            animation: pulse 1.5s ease-in-out infinite;
        }

        .loading-dot:nth-child(2) { animation-delay: 0.3s; }
        .loading-dot:nth-child(3) { animation-delay: 0.6s; }

        .canvas-container {
            width: 100%;
            height: 100%;
            position: relative;
            overflow: hidden;
        }

        #three-canvas {
            width: 100%;
            height: 100%;
            display: block;
            cursor: grab;
        }

        #three-canvas:active {
            cursor: grabbing;
        }

        .controls {
            padding: 1.5rem 2rem 2rem;
            display: flex;
            justify-content: center;
            gap: 0.75rem;
            flex-wrap: wrap;
        }

        .control-btn {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            color: #495057;
            padding: 0.75rem 1.25rem;
            border-radius: 12px;
            cursor: pointer;
            font-weight: 500;
            font-size: 0.9rem;
            transition: all 0.2s ease;
            outline: none;
        }

        .control-btn:hover {
            background: #e9ecef;
            border-color: #dee2e6;
            transform: translateY(-1px);
        }

        .control-btn:active {
            transform: translateY(0);
        }

        .control-btn.active {
            background: #1a1a1a;
            color: white;
            border-color: #1a1a1a;
        }

        .info-badge {
            position: absolute;
            top: 1rem;
            right: 1rem;
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(20px);
            padding: 0.5rem 0.75rem;
            border-radius: 8px;
            font-size: 0.8rem;
            color: #666;
            font-weight: 500;
            z-index: 5;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .info-badge.visible {
            opacity: 1;
        }

        @keyframes pulse {
            0%, 100% { 
                opacity: 0.4;
                transform: scale(0.8);
            }
            50% { 
                opacity: 1;
                transform: scale(1);
            }
        }

        @media (max-width: 768px) {
            .container {
                margin: 0.5rem;
                border-radius: 20px;
            }
            
            .header {
                padding: 1.5rem 1.5rem 1rem;
            }
            
            .title {
                font-size: 1.25rem;
            }
            
            .canvas-section {
                height: 400px;
            }
            
            .controls {
                padding: 1rem 1.5rem 1.5rem;
                gap: 0.5rem;
            }
            
            .control-btn {
                padding: 0.65rem 1rem;
                font-size: 0.85rem;
            }
        }

        @media (max-width: 480px) {
            .controls {
                flex-direction: column;
                align-items: stretch;
            }
            
            .control-btn {
                width: 100%;
                text-align: center;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1 class="title">3D Geometric Visualization</h1>
            <p class="subtitle">Interactive geometric forms with smooth animations. Drag to rotate, scroll to zoom.</p>
        </div>
        
        <div class="canvas-section">
            <div class="loading-indicator" id="loading-indicator">
                <span>Loading</span>
                <div class="loading-dot"></div>
                <div class="loading-dot"></div>
                <div class="loading-dot"></div>
            </div>
            
            <div class="info-badge" id="info-badge">
                <span id="current-shape">Torus</span>
            </div>
            
            <div class="canvas-container">
                <canvas id="three-canvas"></canvas>
            </div>
        </div>
        
        <div class="controls">
            <button class="control-btn active" onclick="changeGeometry('torus')" data-shape="torus">Torus</button>
            <button class="control-btn" onclick="changeGeometry('sphere')" data-shape="sphere">Sphere</button>
            <button class="control-btn" onclick="changeGeometry('cube')" data-shape="cube">Cube</button>
            <button class="control-btn" onclick="changeGeometry('octahedron')" data-shape="octahedron">Octahedron</button>
            <button class="control-btn" onclick="toggleWireframe()" id="wireframe-btn">Wireframe</button>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script>
        class MinimalistVisualization {
            constructor() {
                this.scene = null;
                this.camera = null;
                this.renderer = null;
                this.mesh = null;
                this.controls = {
                    mouseDown: false,
                    mouseX: 0,
                    mouseY: 0,
                    rotationX: 0,
                    rotationY: 0
                };
                this.clock = new THREE.Clock();
                this.currentGeometry = 'torus';
                this.wireframeMode = false;
                
                this.init();
            }

            init() {
                try {
                    this.setupScene();
                    this.createGeometry();
                    this.setupLighting();
                    this.setupEventListeners();
                    this.animate();
                    this.hideLoader();
                } catch (error) {
                    console.error('Initialization failed:', error);
                    this.showError();
                }
            }

            setupScene() {
                const container = document.querySelector('.canvas-section');
                const canvas = document.getElementById('three-canvas');
                
                this.scene = new THREE.Scene();
                this.scene.background = new THREE.Color(0xfafafa);

                this.camera = new THREE.PerspectiveCamera(
                    50,
                    container.clientWidth / container.clientHeight,
                    0.1,
                    100
                );
                this.camera.position.set(0, 0, 6);

                this.renderer = new THREE.WebGLRenderer({ 
                    canvas: canvas,
                    antialias: true,
                    alpha: true
                });
                this.renderer.setSize(container.clientWidth, container.clientHeight);
                this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
                this.renderer.shadowMap.enabled = true;
                this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;
            }

            createGeometry() {
                if (this.mesh) {
                    this.scene.remove(this.mesh);
                    this.mesh.geometry.dispose();
                    this.mesh.material.dispose();
                }

                let geometry;
                
                switch (this.currentGeometry) {
                    case 'sphere':
                        geometry = new THREE.SphereGeometry(1.5, 64, 32);
                        break;
                    case 'cube':
                        geometry = new THREE.BoxGeometry(2.5, 2.5, 2.5, 8, 8, 8);
                        break;
                    case 'octahedron':
                        geometry = new THREE.OctahedronGeometry(1.8, 2);
                        break;
                    default:
                        geometry = new THREE.TorusGeometry(1.2, 0.4, 32, 100);
                }

                const material = new THREE.MeshLambertMaterial({
                    color: 0x2c2c2c,
                    wireframe: this.wireframeMode,
                    transparent: true,
                    opacity: 0.95
                });

                this.mesh = new THREE.Mesh(geometry, material);
                this.mesh.castShadow = true;
                this.mesh.receiveShadow = true;
                this.scene.add(this.mesh);

                // Update UI
                document.getElementById('current-shape').textContent = this.getShapeName();
                document.getElementById('info-badge').classList.add('visible');
                setTimeout(() => {
                    document.getElementById('info-badge').classList.remove('visible');
                }, 2000);
            }

            setupLighting() {
                // Soft ambient light
                const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
                this.scene.add(ambientLight);

                // Main directional light
                const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
                directionalLight.position.set(5, 5, 5);
                directionalLight.castShadow = true;
                directionalLight.shadow.mapSize.width = 1024;
                directionalLight.shadow.mapSize.height = 1024;
                directionalLight.shadow.camera.near = 0.1;
                directionalLight.shadow.camera.far = 50;
                directionalLight.shadow.camera.left = -10;
                directionalLight.shadow.camera.right = 10;
                directionalLight.shadow.camera.top = 10;
                directionalLight.shadow.camera.bottom = -10;
                this.scene.add(directionalLight);

                // Subtle fill light
                const fillLight = new THREE.DirectionalLight(0xffffff, 0.3);
                fillLight.position.set(-3, -3, -3);
                this.scene.add(fillLight);
            }

            setupEventListeners() {
                const canvas = this.renderer.domElement;
                
                // Mouse controls
                canvas.addEventListener('mousedown', (e) => {
                    this.controls.mouseDown = true;
                    this.controls.mouseX = e.clientX;
                    this.controls.mouseY = e.clientY;
                });

                canvas.addEventListener('mousemove', (e) => {
                    if (this.controls.mouseDown) {
                        const deltaX = e.clientX - this.controls.mouseX;
                        const deltaY = e.clientY - this.controls.mouseY;
                        
                        this.controls.rotationY += deltaX * 0.01;
                        this.controls.rotationX += deltaY * 0.01;
                        
                        this.controls.mouseX = e.clientX;
                        this.controls.mouseY = e.clientY;
                    }
                });

                canvas.addEventListener('mouseup', () => {
                    this.controls.mouseDown = false;
                });

                canvas.addEventListener('mouseleave', () => {
                    this.controls.mouseDown = false;
                });

                // Touch controls
                canvas.addEventListener('touchstart', (e) => {
                    e.preventDefault();
                    const touch = e.touches[0];
                    this.controls.mouseDown = true;
                    this.controls.mouseX = touch.clientX;
                    this.controls.mouseY = touch.clientY;
                });

                canvas.addEventListener('touchmove', (e) => {
                    e.preventDefault();
                    if (this.controls.mouseDown && e.touches.length === 1) {
                        const touch = e.touches[0];
                        const deltaX = touch.clientX - this.controls.mouseX;
                        const deltaY = touch.clientY - this.controls.mouseY;
                        
                        this.controls.rotationY += deltaX * 0.01;
                        this.controls.rotationX += deltaY * 0.01;
                        
                        this.controls.mouseX = touch.clientX;
                        this.controls.mouseY = touch.clientY;
                    }
                });

                canvas.addEventListener('touchend', (e) => {
                    e.preventDefault();
                    this.controls.mouseDown = false;
                });

                // Zoom with mouse wheel
                canvas.addEventListener('wheel', (e) => {
                    e.preventDefault();
                    this.camera.position.z += e.deltaY * 0.01;
                    this.camera.position.z = Math.max(2, Math.min(15, this.camera.position.z));
                });

                // Window resize
                window.addEventListener('resize', () => this.onWindowResize());
            }

            animate() {
                requestAnimationFrame(() => this.animate());

                const time = this.clock.getElapsedTime();
                
                if (this.mesh) {
                    // Combine user interaction with subtle auto-rotation
                    this.mesh.rotation.x = this.controls.rotationX + Math.sin(time * 0.3) * 0.1;
                    this.mesh.rotation.y = this.controls.rotationY + time * 0.2;
                    
                    // Subtle floating animation
                    this.mesh.position.y = Math.sin(time * 0.8) * 0.1;
                }

                this.renderer.render(this.scene, this.camera);
            }

            onWindowResize() {
                const container = document.querySelector('.canvas-section');
                this.camera.aspect = container.clientWidth / container.clientHeight;
                this.camera.updateProjectionMatrix();
                this.renderer.setSize(container.clientWidth, container.clientHeight);
            }

            hideLoader() {
                const loader = document.getElementById('loading-indicator');
                if (loader) {
                    loader.style.opacity = '0';
                    setTimeout(() => loader.style.display = 'none', 300);
                }
            }

            showError() {
                const loader = document.getElementById('loading-indicator');
                if (loader) {
                    loader.innerHTML = '<span style="color: #e74c3c;">WebGL not supported</span>';
                }
            }

            getShapeName() {
                const names = {
                    'torus': 'Torus',
                    'sphere': 'Sphere',
                    'cube': 'Cube',
                    'octahedron': 'Octahedron'
                };
                return names[this.currentGeometry] || 'Torus';
            }
        }

        // Global instance
        let visualization;

        // Initialize when page loads
        document.addEventListener('DOMContentLoaded', () => {
            visualization = new MinimalistVisualization();
        });

        // Control functions
        function changeGeometry(type) {
            if (visualization) {
                visualization.currentGeometry = type;
                visualization.createGeometry();
                
                // Update button states
                document.querySelectorAll('.control-btn[data-shape]').forEach(btn => {
                    btn.classList.remove('active');
                });
                document.querySelector(`[data-shape="${type}"]`).classList.add('active');
            }
        }

        function toggleWireframe() {
            if (visualization && visualization.mesh) {
                visualization.wireframeMode = !visualization.wireframeMode;
                visualization.mesh.material.wireframe = visualization.wireframeMode;
                
                const btn = document.getElementById('wireframe-btn');
                btn.classList.toggle('active', visualization.wireframeMode);
            }
        }
    </script>
</body>
</html>
