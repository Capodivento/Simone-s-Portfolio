import React, { useEffect, useRef } from 'react';
import * as THREE from 'three';

const NeonCrystal = () => {
  const mountRef = useRef(null);

  useEffect(() => {
    // Scene setup
    const scene = new THREE.Scene();
    scene.background = new THREE.Color(0x000000);

    // Camera
    const camera = new THREE.PerspectiveCamera(
      75, 
      window.innerWidth / window.innerHeight, 
      0.1, 
      1000
    );
    camera.position.z = 15;

    // Renderer
    const renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    mountRef.current.appendChild(renderer.domElement);

    // Crystal Geometry
    const geometry = new THREE.IcosahedronGeometry(5, 3);
    
    // Neon Materials
    const wireframeMaterial = new THREE.MeshBasicMaterial({
      color: 0x00ff00,
      wireframe: true,
      transparent: true,
      opacity: 0.3
    });

    const solidMaterial = new THREE.MeshBasicMaterial({
      color: 0x00ff00,
      transparent: true,
      opacity: 0.1
    });

    // Create Crystal Mesh
    const crystalWireframe = new THREE.Mesh(geometry, wireframeMaterial);
    const crystalSolid = new THREE.Mesh(geometry, solidMaterial);

    scene.add(crystalWireframe);
    scene.add(crystalSolid);

    // Lighting
    const ambientLight = new THREE.AmbientLight(0x404040);
    scene.add(ambientLight);

    const pointLight = new THREE.PointLight(0x00ff00, 1, 100);
    pointLight.position.set(10, 10, 10);
    scene.add(pointLight);

    // Glow Effect
    const glowGeometry = new THREE.IcosahedronGeometry(5.5, 3);
    const glowMaterial = new THREE.MeshBasicMaterial({
      color: 0x00ff00,
      transparent: true,
      opacity: 0.1
    });
    const glowMesh = new THREE.Mesh(glowGeometry, glowMaterial);
    scene.add(glowMesh);

    // Mouse interaction
    const mouse = new THREE.Vector2();
    const raycaster = new THREE.Raycaster();

    const onMouseMove = (event) => {
      // Calculate mouse position in normalized device coordinates
      mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
    };

    // Animation
    const animate = () => {
      requestAnimationFrame(animate);

      // Subtle rotation based on mouse movement
      raycaster.setFromCamera(mouse, camera);

      crystalWireframe.rotation.x += 0.005 + mouse.x * 0.01;
      crystalWireframe.rotation.y += 0.005 + mouse.y * 0.01;
      crystalSolid.rotation.x += 0.005 + mouse.x * 0.01;
      crystalSolid.rotation.y += 0.005 + mouse.y * 0.01;
      glowMesh.rotation.x += 0.005 + mouse.x * 0.01;
      glowMesh.rotation.y += 0.005 + mouse.y * 0.01;

      renderer.render(scene, camera);
    };

    // Add mouse move listener
    window.addEventListener('mousemove', onMouseMove, false);

    animate();

    // Responsive handling
    const handleResize = () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    };

    window.addEventListener('resize', handleResize);

    // Cleanup
    return () => {
      window.removeEventListener('resize', handleResize);
      window.removeEventListener('mousemove', onMouseMove);
      mountRef.current.removeChild(renderer.domElement);
      geometry.dispose();
      wireframeMaterial.dispose();
      solidMaterial.dispose();
    };
  }, []);

  return (
    <div 
      ref={mountRef} 
      className="w-full h-screen fixed top-0 left-0"
    />
  );
};

export default NeonCrystal;
